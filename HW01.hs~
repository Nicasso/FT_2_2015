{-# OPTIONS_GHC -Wall #-}
module HW01 where

-- Exercise 1 -----------------------------------------

-- Get the last digit from a number
getLastChar :: String -> String
getLastChar x = [last x] 

lastDigit :: Integer -> Integer
lastDigit a = read (getLastChar (show a))

-- Drop the last digit from a number
dropLastDigit :: Integer -> Integer
dropLastDigit b = if (b >= 10) then (read (init (show b))) else 0

-- Exercise 2 -----------------------------------------
digs :: Integral x => x -> [x]
digs 0 = []
digs x = digs (x `div` 10) ++ [x `mod` 10]

toRevDigits :: Integer -> [Integer]
toRevDigits c = if c > 0 then reverse (digs c) else []

-- Exercise 3 -----------------------------------------

-- Double every second number in a list starting on the left.
doubleEveryOther :: [Integer] -> [Integer]
doubleEveryOther d = take 2 d
-- Exercise 4 -----------------------------------------

-- Calculate the sum of all the digits in every Integer.
sumDigits :: [Integer] -> Integer
sumDigits e = sum e


-- Exercise 5 -----------------------------------------

-- Validate a credit card number using the above functions.
luhn :: Integer -> Bool
luhn = undefined

-- Exercise 6 -----------------------------------------

-- Towers of Hanoi for three pegs
type Peg = String
type Move = (Peg, Peg)

hanoi :: Integer -> Peg -> Peg -> Peg -> [Move]
hanoi = undefined
